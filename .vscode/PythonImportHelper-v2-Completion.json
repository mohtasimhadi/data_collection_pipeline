[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "record_video",
        "importPath": "record",
        "description": "record",
        "isExtraImport": true,
        "detail": "record",
        "documentation": {}
    },
    {
        "label": "live_stream",
        "importPath": "stream",
        "description": "stream",
        "isExtraImport": true,
        "detail": "stream",
        "documentation": {}
    },
    {
        "label": "extract_frames_from_video",
        "importPath": "extract_frames",
        "description": "extract_frames",
        "isExtraImport": true,
        "detail": "extract_frames",
        "documentation": {}
    },
    {
        "label": "depthai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "depthai",
        "description": "depthai",
        "detail": "depthai",
        "documentation": {}
    },
    {
        "label": "extract_frames_from_video",
        "kind": 2,
        "importPath": "extract_frames",
        "description": "extract_frames",
        "peekOfCode": "def extract_frames_from_video(input_file, output_folder):\n    cap = cv2.VideoCapture(input_file)\n    frame_count = 0\n    while cap.isOpened():\n        ret, frame = cap.read()\n        if not ret:\n            break\n        cv2.imwrite(f\"{output_folder}/frame_{frame_count:04d}.png\", frame)\n        frame_count += 1\n    cap.release()",
        "detail": "extract_frames",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"DepthAI Camera Operations\")\n    parser.add_argument('operation', choices=['record', 'stream', 'extract'], help=\"Operation to perform: record, stream, extract\")\n    parser.add_argument('--cameras', nargs='+', choices=['left', 'right', 'rgb'], help=\"Cameras to use: left, right, rgb\")\n    parser.add_argument('--output', type=str, help=\"Output file for recording or extracting frames\")\n    parser.add_argument('--input', type=str, help=\"Input file for extracting frames\")\n    args = parser.parse_args()\n    if args.operation == 'record':\n        record_video(args.cameras, args.output)\n    elif args.operation == 'stream':",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "record_video",
        "kind": 2,
        "importPath": "record",
        "description": "record",
        "peekOfCode": "def record_video(cameras, output_file):\n    pipeline = dai.Pipeline()\n    camera_nodes = {}\n    encoders = {}\n    if 'left' in cameras:\n        mono_left = pipeline.create(dai.node.MonoCamera)\n        mono_left.setBoardSocket(dai.CameraBoardSocket.LEFT)\n        encoder_left = pipeline.create(dai.node.VideoEncoder)\n        encoder_left.setDefaultProfilePreset(30, dai.VideoEncoderProperties.Profile.H265_MAIN)\n        mono_left.out.link(encoder_left.input)",
        "detail": "record",
        "documentation": {}
    },
    {
        "label": "live_stream",
        "kind": 2,
        "importPath": "stream",
        "description": "stream",
        "peekOfCode": "def live_stream(cameras):\n    pipeline = dai.Pipeline()\n    camera_nodes = {}\n    if 'left' in cameras:\n        mono_left = pipeline.create(dai.node.MonoCamera)\n        mono_left.setBoardSocket(dai.CameraBoardSocket.LEFT)\n        xout_left = pipeline.create(dai.node.XLinkOut)\n        xout_left.setStreamName(\"left\")\n        mono_left.out.link(xout_left.input)\n        camera_nodes['left'] = \"left\"",
        "detail": "stream",
        "documentation": {}
    }
]