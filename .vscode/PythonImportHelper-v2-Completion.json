[
    {
        "label": "depthai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "depthai",
        "description": "depthai",
        "detail": "depthai",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "DepthAIModule",
        "importPath": "depthai_module",
        "description": "depthai_module",
        "isExtraImport": true,
        "detail": "depthai_module",
        "documentation": {}
    },
    {
        "label": "extract_frames_from_video",
        "importPath": "extract_frames",
        "description": "extract_frames",
        "isExtraImport": true,
        "detail": "extract_frames",
        "documentation": {}
    },
    {
        "label": "DepthAIModule",
        "kind": 6,
        "importPath": "depthai_module",
        "description": "depthai_module",
        "peekOfCode": "class DepthAIModule:\n    def __init__(self, cameras, output_folder=\"output\"):\n        self.cameras = cameras\n        self.devices = dai.Device.getAllAvailableDevices()\n        self.output_folder = output_folder\n        if len(self.devices) == 0:\n            raise RuntimeError(\"No DepthAI devices found!\")\n        os.makedirs(self.output_folder, exist_ok=True)\n    def create_pipeline(self):\n        pipeline = dai.Pipeline()",
        "detail": "depthai_module",
        "documentation": {}
    },
    {
        "label": "extract_frames_from_video",
        "kind": 2,
        "importPath": "extract_frames",
        "description": "extract_frames",
        "peekOfCode": "def extract_frames_from_video(input_file, output_folder):\n    cap = cv2.VideoCapture(input_file)\n    frame_count = 0\n    while cap.isOpened():\n        ret, frame = cap.read()\n        if not ret:\n            break\n        cv2.imwrite(f\"{output_folder}/frame_{frame_count:04d}.png\", frame)\n        frame_count += 1\n    cap.release()",
        "detail": "extract_frames",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"DepthAI Camera Operations\")\n    parser.add_argument('operation', choices=['record', 'stream', 'extract'], help=\"Operation to perform: record, stream, extract\")\n    parser.add_argument('--cameras', nargs='+', choices=['left', 'right', 'rgb'], help=\"Cameras to use: left, right, rgb\")\n    parser.add_argument('--output', type=str, help=\"Output file for recording or extracting frames\")\n    parser.add_argument('--input', type=str, help=\"Input file for extracting frames\")\n    args = parser.parse_args()\n    if args.operation in ['record', 'stream']:\n        module = DepthAIModule(args.cameras)\n    if args.operation == 'record':",
        "detail": "main",
        "documentation": {}
    }
]